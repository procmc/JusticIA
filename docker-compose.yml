services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - TIKA_SERVER_URL=http://tika:9998
    depends_on:
      - redis
      - tika
    restart: unless-stopped

  # Worker de Celery para procesamiento asíncrono (compatible PC local y VM)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: /venv/bin/celery -A celery_app worker --loglevel=info --concurrency=1 --max-tasks-per-child=5 --max-memory-per-child=3000000 --pool=prefork
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/.env:/app/.env
      - ./backend/models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - TIKA_SERVER_URL=http://tika:9998
    depends_on:
      - redis
      - tika
      - backend
    restart: unless-stopped

  tika:
    build:
      context: ./backend
      dockerfile: Dockerfile.tika
    ports:
      - "9998:9998"
    restart: unless-stopped
    environment:
      # Memoria dinámica: mín 256MB, máx 2GB (para OCR pesado en VM)
      - TIKA_SERVER_OPTS=-Xms256m -Xmx2048m

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    # Memoria aumentada: 256MB → 1GB para manejar archivos grandes y embeddings
    # Policy: allkeys-lru elimina claves menos usadas cuando se llena
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru

volumes:
  redis_data:
